version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MODEL_DRAFT=${MODEL_DRAFT}
      - DATABASE_URL=sqlite:///data/ntm_trading.db
      - MICROSERVICE_URL=http://microservice:3002
      - ENVIRONMENT=production
    volumes:
      - ./data:/app/data
      - backend_logs:/app/logs
    depends_on:
      - redis
      - microservice
    restart: unless-stopped
    networks:
      - agentchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://api.agentchain.trade/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=https://api.agentchain.trade/api/v1
      - REACT_APP_MICROSERVICE_URL=http://localhost:3002
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - agentchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gasless Transaction Microservice
  microservice:
    build:
      context: ./microservice
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL}
      - FUJI_RPC_URL=${FUJI_RPC_URL}
    volumes:
      - microservice_logs:/app/logs
    restart: unless-stopped
    networks:
      - agentchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - agentchain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agentchain-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - agentchain-network

networks:
  agentchain-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  backend_logs:
  microservice_logs: